//=============================================================================
// Alarm Config Types and Interfaces
//=============================================================================
import {TreatMissingData} from 'aws-cdk-lib/aws-cloudwatch';
import {ComparisonOperator} from '@aws-sdk/client-cloudwatch';
import {Stats} from './stats-factory.mjs';

//=============================================================================
// Statistic Typing and Schemas
//=============================================================================
//
/**
 * Provides a centralized, type-safe collection of CloudWatch standard and extended statistics.
 *
 * Using this object ensures consistency and alignment with AWS CloudWatch's accepted statistical identifiers
 * when configuring metrics and alarms through the AWS SDK.
 *
 * @example
 * ```typescript
 * // Usage with standard statistics
 * const avgStat = StatFactory.Standard.average; // "Average"
 * const maxStat = StatFactory.Standard.maximum; // "Maximum"
 *
 * // Usage with extended statistics: percentiles and trimmed means
 * const p90 = StatFactory.Extended.p(90);            // "p90"
 * const trimmedMean = StatFactory.Extended.tm(10,90); // "TM(10%:90%)"
 * const percentileRank = StatFactory.Extended.pr(100,2000); // "PR(100:2000)"
 * ```
 *
 * @remarks
 * TSDoc might not fully detail dynamic properties generated by this type.
 * Please use IDE auto-completion or consult the type definitions directly
 * for full details on all available methods and statistics provided.
 *
 * @see {@link Stats} - Utility class for generating standardized CloudWatch statistics
 * @see {@link https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html
 * @see {@link https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/Package/-aws-sdk-client-cloudwatch/Interface/PutMetricAlarmCommandInput/}
 */
export const StatFactory = {
  /**
   * Standard CloudWatch statistics available by default without extra parameters.
   */
  Standard: {
    /** Number of data points used for the statistical calculation. */
    samplecount: Stats.SAMPLE_COUNT,

    /** The average value of the metric (calculated as `Sum / SampleCount`). */
    average: Stats.AVERAGE,

    /** Total sum of all metric values within the period. */
    sum: Stats.SUM,

    /** Minimum metric value observed during the period. */
    minimum: Stats.MINIMUM,

    /** Maximum metric value observed during the period. */
    maximum: Stats.MAXIMUM,

    /** Interquartile mean, equivalent to a trimmed mean with the central 50% (25% - 75%) of data points. */
    iqm: Stats.IQM,
  },

  /**
   * Extended CloudWatch statistics requiring additional parameters to specify percentiles,
   * trimmed boundaries, or absolute thresholds.
   */
  Extended: {
    /**
     * Percentile statistic. Expressed in form `pXX`.
     *
     * @param percentile - A number greater than 0 and up to 100, e.g., `90` for the 90th percentile.
     *
     * @example
     * ```typescript
     * StatFactory.Extended.p(95); // "p95"
     * ```
     */
    p: (percentile: number) => Stats.p(percentile),

    /**
     * Alias for `p`.
     */
    percentile: (percentile: number) => Stats.percentile(percentile),

    /**
     * Trimmed mean statistic. Removes extreme data points outside specified percentile bounds.
     *
     * Accepts one or two parameters:
     * - Single parameter: upper bound, defaults lower bound to 0.
     * - Two parameters: lower and upper percentile bounds respectively.
     *
     * @example
     * ```typescript
     * StatFactory.Extended.tm(90);     // "tm90" trims top 10%
     * StatFactory.Extended.tm(5, 95);  // "TM(5%:95%)" trims bottom and top 5%
     * ```
     */
    tm: (p1: number, p2?: number) => Stats.tm(p1, p2),

    /**
     * Alias for `tm`.
     */
    trimmedMean: (p1: number, p2?: number) => Stats.trimmedMean(p1, p2),

    /**
     * Winsorized mean statistic. Values beyond the percentile bounds are replaced with
     * boundary values rather than discarded.
     *
     * Accepts one or two parameters similar to trimmed mean.
     *
     * @example
     * ```typescript
     * StatFactory.Extended.wm(90);    // "wm90"
     * StatFactory.Extended.wm(10,90); // "WM(10%:90%)"
     * ```
     */
    wm: (p1: number, p2?: number) => Stats.wm(p1, p2),

    /**
     * Alias for `wm`.
     */
    winsorizedMean: (p1: number, p2?: number) => Stats.winsorizedMean(p1, p2),

    /**
     * Trimmed count statistic. Counts number of data points within specified percentiles.
     *
     * @example
     * ```typescript
     * StatFactory.Extended.tc(90);     // "tc90"
     * StatFactory.Extended.tc(10, 90); // "TC(10%:90%)"
     * ```
     */
    tc: (p1: number, p2?: number) => Stats.tc(p1, p2),

    /**
     * Alias for `tc`.
     */
    trimmedCount: (p1: number, p2?: number) => Stats.trimmedCount(p1, p2),

    /**
     * Trimmed sum statistic. Sum of data points within given percentile bounds.
     *
     * @example
     * ```typescript
     * StatFactory.Extended.ts(95);     // "ts95"
     * StatFactory.Extended.ts(25, 75); // "TS(25%:75%)"
     * ```
     */
    ts: (p1: number, p2?: number) => Stats.ts(p1, p2),

    /**
     * Alias for `ts`.
     */
    trimmedSum: (p1: number, p2?: number) => Stats.trimmedSum(p1, p2),

    /**
     * Percentile rank statistic. Reports percentage of data points falling within absolute-value bounds.
     *
     * Accepts either one or two numeric parameters representing the absolute-value range:
     * - Single parameter: upper bound, assumes lower bound is 0.
     * - Two parameters: explicitly defines lower and upper absolute-value bounds.
     *
     * @example
     * ```typescript
     * StatFactory.Extended.pr(300);       // "PR(0:300)", percentage below or equal to 300
     * StatFactory.Extended.pr(100,2000);  // "PR(100:2000)", percentage between 100 and 2000
     * ```
     */
    pr: (v1: number, v2?: number) => Stats.pr(v1, v2),

    /**
     * Alias for `pr`.
     */
    percentileRank: (v1: number, v2?: number) => Stats.percentileRank(v1, v2),
  },
} as const;

/**
 * Helper class to correctly map case of StatFactory keys conditionally using a single number parameter.
 * @see {@link StatFactory} for the full list of statistics.
 * @see {@link ValidExtendedStat} for the type-safe string literals implementation.
 */
type SingleParamStatFactoryKeys = Extract<
  keyof typeof StatFactory.Extended,
  'p' | 'tm' | 'wm' | 'tc' | 'ts'
>;

/**
 * Represents valid string-format patterns for AWS CloudWatch Extended Statistics.
 *
 * Ensures type-safety when specifying CloudWatch's extended statistic identifiers.
 * Includes formatting patterns derived directly from {@link StatMethods.Extended}.
 *
 * Includes the following extended statistic patterns:
 *
 * - Percentiles (`p90`): Simple percentile-based statistics.
 * - Trimmed Mean (`tm90`, `TM(10%:90%)`): Statistical average computed by trimming outlier data points beyond specified percentile bounds.
 * - Winsorized Mean (`wm90`, `WM(10%:90%)`): Modified average where data outside of bounds are clamped, not discarded.
 * - Trimmed Count (`tc90`, `TC(10%:90%)`): Count of data points remaining after trimming percentile ranges.
 * - Trimmed Sum (`ts90`, `TS(10%:90%)`): Sum of values within boarders after data trimming.
 * - Percentile Rank (`PR(100:2000)`): Percentage of total data points falling between specified absolute numeric bounds.
 *
 * @example
 *
 * ```typescript
 * const validPercentile: ValidExtendedStat = 'p90';        // valid
 * const validTrimMean: ValidExtendedStat = 'tm95';         // valid
 * const validTrimMeanRange: ValidExtendedStat = 'TM(5%:95%)'; // valid
 * const validPercentileRank: ValidExtendedStat = 'PR(0:300)';  // valid
 * const invalidStat: ValidExtendedStat = 'unknownStat';    // Error: invalid statistic pattern
 * ```
 *
 * @remarks
 *
 * This type encourages correct usage by limiting valid statistics strings.
 * For statically typed pattern suggestions and validation, rely on IDE autocomplete.
 *
 * @see {@link StatFactory} - Reference object for generating CloudWatch statistic strings.
 * @see {@link Stats} - Base utility class for generating AWS-compatible statistical formats.
 * @see {@link https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html}
 */
export type ValidExtendedStat = {
  [K in keyof typeof StatFactory.Extended]: (typeof StatFactory.Extended)[K] extends (
    p1: number,
    p2?: number,
  ) => unknown
    ? K extends SingleParamStatFactoryKeys
      ? // SingleParamStatFactoryKeys "key90"
        `${K}${number}`
      : // all other absolute-number ranges formatted: "KEY(0:3000)" | "KEY(10%:90%)"
        `${K}(${number}:${number})` | `${K}(${number}%:${number}%)`
    : never;
}[keyof typeof StatFactory.Extended];

/**
 * Type representing valid standard CloudWatch statistics string literals.
 *
 * This type extracts the standard statistic values from the StatFactory.Standard object,
 * preserving their exact string literal types.
 *
 * The mapped type ensures that all values from StatFactory.Standard are properly typed,
 *
 * @example
 * // Valid standard statistics:
 * // "SampleCount" | "Average" | "Sum" | "Minimum" | "Maximum" | "IQM"
 *
 * const stat: StandardStat = "Average"; // Valid
 * const invalidStat: StandardStat = "p(90)"; // Type error - extended statistic
 *
 * @see {@link Statistic} for the CDK enumeration of standard statistics - deprecated, ref only
 * @see {@link StatFactory.Standard} Object containing the standard statistic constants
 *
 */
export type StandardStat =
  (typeof StatFactory.Standard)[keyof typeof StatFactory.Standard];

/**
 * Represents all valid CloudWatch statistics that can be used with the AWS CloudWatch API.
 *
 * 1. Standard Statistics:
 *    - "SampleCount" - The count (number) of data points used for statistical calculation
 *    - "Average" - The value of Sum / SampleCount during the specified period
 *    - "Sum" - All values submitted for the matching metric added together
 *    - "Minimum" - The lowest value observed during the specified period
 *    - "Maximum" - The highest value observed during the specified period
 *    - "IQM" - Interquartile mean (trimmed mean of the middle 50%, equivalent to TM(25,75))
 *
 * 2. Extended Statistics:
 *    - "p(N)" - Nth percentile (e.g., "p(90)" for 90th percentile)
 *    - "tm(N)" - Trimmed mean including values from 0 to Nth percentile
 *    - "tm(N,M)" - Trimmed mean including values between Nth and Mth percentiles
 *    - "wm(N)" - Winsorized mean with upper boundary at Nth percentile
 *    - "wm(N,M)" - Winsorized mean with boundaries at Nth and Mth percentiles
 *    - "tc(N)" - Trimmed count of values up to Nth percentile
 *    - "tc(N,M)" - Trimmed count of values between Nth and Mth percentiles
 *    - "ts(N)" - Trimmed sum of values up to Nth percentile
 *    - "ts(N,M)" - Trimmed sum of values between Nth and Mth percentiles
 *    - "pr(V)" - Percentile rank showing percentage of values at or below V
 *    - "pr(V,W)" - Percentile rank showing percentage of values between V and W
 *
 * Both Standard and Extended statistics are generated using the static methods in the Stats class:
 *
 * @example
 * // Generate standard statistics using StatFactory.Standard
 * const avgStat = StatFactory.Standard.average; // "Average"
 * const maxStat = StatFactory.Standard.maximum; // "Maximum"
 *
 * @example
 * // Generate extended statistics using StatFactory.Extended
 * const p90 = StatFactory.Extended.p(90); // "p(90)"
 * const trimmedMean = StatFactory.Extended.tm(10, 90); // "tm(10,90)"
 * const winsorizedMean = StatFactory.Extended.wm(95); // "wm(95)"
 * const percentileRank = StatFactory.Extended.pr(100, 2000); // "pr(100,2000)"
 *
 * Important: When calling CloudWatch APIs like PutMetricAlarm and specifying a MetricName,
 * you must specify either a standard Statistic or an ExtendedStatistic, but not both.
 *
 * @see {@link StatFactory} Object containing methods to generate statistic strings
 * @see {@link StandardStat} Type for standard statistics
 * @see {@link ValidExtendedStat} Type for extended statistics
 * @see {@link https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html}
 */
export type ValidStatistic = StandardStat | ValidExtendedStat;

//=============================================================================
// Missing Data Treatment Typing and Schema
//=============================================================================

/**
 * Specifies how CloudWatch handles missing data points when evaluating an alarm.
 *
 * The following values determine how missing data affects alarm state:
 *
 * - `'missing'`: The alarm state doesn't change when data is missing.
 *   Missing data points are not considered in the alarm evaluation.
 *
 * - `'ignore'`: The alarm evaluates the metric based only on the data points that are present.
 *   Missing data points are effectively ignored in the evaluation.
 *
 * - `'breaching'`: Missing data points are treated as exceeding the threshold.
 *   This makes the alarm more sensitive, treating missing data as bad.
 *
 * - `'notBreaching'`: Missing data points are treated as being within the threshold.
 *   This makes the alarm less sensitive, treating missing data as good.
 *
 * @see {@link TreatMissingData} The AWS enum this type is derived from
 * @see {@link https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_cloudwatch.TreatMissingData.html}
 * @see {@link https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_PutMetricAlarm.html}
 */
export type MissingDataTreatment = TreatMissingData[keyof TreatMissingData] &
  string;

//=============================================================================
// Metric Alarm Options and Config Interfaces and Schemas
//=============================================================================
/**
 * Options for configuring CloudWatch metric alarms.
 *
 * @interface MetricAlarmOptions
 *
 */
export interface MetricAlarmOptions {
  /** Anomaly: Based on a standard deviation. Higher number means thicker band, lower number means thinner band.
   * Non-Anomaly: The value against which the specified statistic is compared.
   */
  warningThreshold: number | null;
  /**
   *Anomaly: Based on a standard deviation. Higher number means thicker band, lower number means thinner band.
   * Non-Anomaly: The value against which the specified statistic is compared.
   */
  criticalThreshold: number | null;
  /**
   * The polling period in seconds or minutes. Verify in AWS documentation before assuming the number is milliseconds, seconds or minutes.
   * Varies across services.
   */
  period: number;
  /**
   * The number of periods that are evaluated when tracking datapoints to alarm.
   * Creates a rolling observability window of n times the period.
   */
  evaluationPeriods: number;
  // Number of data points to alarm across the evaluation periods.
  dataPointsToAlarm: number;
  /**
   * Valid Cloudwatch Alarm statistics see {@link ValidStatistic} for all valid statistic values
   * @use {@link StatFactory.Standard} for standard statistics
   * @use {@link StatFactory.Extended} for extended statistics
   * @example
   * statistic: StatFactory.Standard.average; // "Average"
   * statistic: StatFactory.Extended.p(90); // "p(90)"
   * statistic: StatFactory.Extended.tm(10,90); // "tm(10,90)"
   */
  statistic: ValidStatistic;
  /**
   * Specifies how missing data points are treated during alarm evaluation. See {@link MissingDataTreatment} for valid treatment options
   */
  missingDataTreatment: MissingDataTreatment;
  /**
   * Represents Both an Enum and valid string literal values for CloudWatch alarm comparison operators.
   * This type extracts the actual string values from the `ComparisonOperator` enum
   * for type-safe handling of comparison operator strings.
   *
   * Valid values include:
   *
   * Standard threshold operators:
   * - `'GreaterThanOrEqualToThreshold'` - Triggers when metric value ≥ threshold
   * - `'GreaterThanThreshold'` - Triggers when metric value > threshold
   * - `'LessThanThreshold'` - Triggers when metric value < threshold
   * - `'LessThanOrEqualToThreshold'` - Triggers when metric value ≤ threshold
   *
   * Anomaly detection operators:
   * - `'LessThanLowerOrGreaterThanUpperThreshold'` - Triggers when metric value is outside the
   *   anomaly detection band (either below lower or above upper threshold)
   * - `'GreaterThanUpperThreshold'` - Triggers when metric value exceeds the upper threshold
   *   of the anomaly detection band
   * - `'LessThanLowerThreshold'` - Triggers when metric value falls below the lower threshold
   *   of the anomaly detection band
   *
   * @usage
   * ```typescript
   * comparisonOperator: ComparisonOperator.GREATER_THAN_OR_EQUAL_TO_THRESHOLD; // "GreaterThanOrEqualToThreshold"
   * comparisonOperator: ComparisonOperator.GREATER_THAN_THRESHOLD; // "GreaterThanThreshold"
   * comparisonOperator: ComparisonOperator.LESS_THAN_THRESHOLD; // "LessThanThreshold"
   * comparisonOperator: ComparisonOperator.LESS_THAN_OR_EQUAL_TO_THRESHOLD; // "LessThanOrEqualToThreshold"
   * comparisonOperator: ComparisonOperator.LESS_THAN_LOWER_OR_GREATER_THAN_UPPER_THRESHOLD; // "LessThanLowerOrGreaterThanUpperThreshold"
   * comparisonOperator: ComparisonOperator.GREATER_THAN_UPPER_THRESHOLD; // "GreaterThanUpperThreshold"
   * comparisonOperator: ComparisonOperator.LESS_THAN_LOWER_THRESHOLD; // "LessThanLowerThreshold"
   * ```
   *
   * @see {@link https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_cloudwatch.ComparisonOperator.html}
   * @see {@link https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_PutMetricAlarm.html}
   * @see {@link ComparisonOperator} - Enum and Type declaration
   */
  comparisonOperator: ComparisonOperator;
}

/**
 * Configuration for creating CloudWatch metric alarms.
 * Defines the core settings and default options for a specific metric alarm.
 *
 * @interface MetricAlarmConfig
 *
 */
export interface MetricAlarmConfig {
  /**
   *   The tag key used to identify the Metric Alarm configuration.
   *   Resources with this tag will have alarms created according to this configuration.
   */
  tagKey: string;
  /**
   *   The name of the CloudWatch metric to monitor with this alarm.
   *   Must be a valid CloudWatch metric name.
   */
  metricName: string;
  /**
   *  The namespace of the CloudWatch metric.
   *  Metrics are grouped by namespaces (e.g., "AWS/EC2", "AWS/Lambda", etc...).
   */
  metricNamespace: string;
  /**
   *  Indicates whether alarms should be created by default when tag autoalarm:enabled = true.
   */
  defaultCreate: boolean;
  /**
   *  Indicates whether this alarm is based on anomaly detection.
   *  If true, the alarm will use anomaly detection models instead of standard metrics. If false, it defaults to static threshold alarms.
   */
  anomaly: boolean;
  /**
   * These are the Default values provided in the Alarm Config object.
   * @see {@link MetricAlarmOptions} for the structure of these options
   */
  defaults: MetricAlarmOptions;
}

export interface MetricAlarmConfigs
  extends Record<string, MetricAlarmConfig[]> {}

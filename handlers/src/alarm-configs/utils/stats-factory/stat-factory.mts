import { Stats } from './stats.mjs';

/**
 * Provides a centralized, type-safe collection of CloudWatch standard and extended statistics methods for easy
 * implementation.
 *
 * Using this object ensures consistency and alignment with AWS CloudWatch's accepted statistical identifiers
 * when configuring metrics and alarms through the AWS SDK.
 *
 * @example
 * ```typescript
 * // Usage with standard statistics
 * const avgStat = StatFactory.Standard.average; // "Average"
 * const maxStat = StatFactory.Standard.maximum; // "Maximum"
 *
 * // Usage with extended statistics: percentiles and trimmed means
 * const p90 = StatFactory.Extended.p(90);            // "p90"
 * const trimmedMean = StatFactory.Extended.tm(10,90); // "TM(10%:90%)"
 * const percentileRank = StatFactory.Extended.pr(100,2000); // "PR(100:2000)"
 * ```
 *
 * @remarks
 * TSDoc might not fully detail dynamic properties generated by this type.
 * Please use IDE auto-completion or consult the type definitions directly
 * for full details on all available methods and statistics provided.
 *
 * @see {@link Stats} - Base abstract class implemented in this factory to generate typesafe statistic values
 * @see {@link https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html
 * @see {@link https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/Package/-aws-sdk-client-cloudwatch/Interface/PutMetricAlarmCommandInput/}
 */
export const StatFactory = {
  /**
   * Standard CloudWatch statistics available by default without extra parameters.
   */
  Standard: {
    /** Number of data points used for the statistical calculation. */
    samplecount: Stats.SAMPLE_COUNT,

    /** The average value of the metric (calculated as `Sum / SampleCount`). */
    average: Stats.AVERAGE,

    /** Total sum of all metric values within the period. */
    sum: Stats.SUM,

    /** Minimum metric value observed during the period. */
    minimum: Stats.MINIMUM,

    /** Maximum metric value observed during the period. */
    maximum: Stats.MAXIMUM,
  },

  /**
   * Extended CloudWatch statistics requiring additional parameters to specify percentiles,
   * trimmed boundaries, or absolute thresholds.
   */
  Extended: {
    /** Interquartile mean, equivalent to a trimmed mean with the central 50% (25% - 75%) of data points. */
    iqm: Stats.IQM,
    /**
     * Percentile statistic. Expressed in form `pXX`.
     *
     * @param percentile - A number greater than 0 and up to 100, e.g., `90` for the 90th percentile.
     *
     * @example
     * ```typescript
     * StatFactory.Extended.p(95); // "p95"
     * ```
     */
    p: (percentile: number) => Stats.p(percentile),

    /**
     * Alias for `p`.
     */
    percentile: (percentile: number) => Stats.percentile(percentile),

    /**
     * Trimmed mean statistic. Removes extreme data points outside specified percentile bounds.
     *
     * Accepts one or two parameters:
     * - Single parameter: upper bound, defaults lower bound to 0.
     * - Two parameters: lower and upper percentile bounds respectively.
     *
     * @example
     * ```typescript
     * StatFactory.Extended.tm(90);     // "tm90" trims top 10%
     * StatFactory.Extended.tm(5, 95);  // "TM(5%:95%)" trims bottom and top 5%
     * ```
     */
    tm: (p1: number, p2?: number) => Stats.tm(p1, p2),

    /**
     * Alias for `tm`.
     */
    trimmedMean: (p1: number, p2?: number) => Stats.trimmedMean(p1, p2),

    /**
     * Winsorized mean statistic. Values beyond the percentile bounds are replaced with
     * boundary values rather than discarded.
     *
     * Accepts one or two parameters similar to trimmed mean.
     *
     * @example
     * ```typescript
     * StatFactory.Extended.wm(90);    // "wm90"
     * StatFactory.Extended.wm(10,90); // "WM(10%:90%)"
     * ```
     */
    wm: (p1: number, p2?: number) => Stats.wm(p1, p2),

    /**
     * Alias for `wm`.
     */
    winsorizedMean: (p1: number, p2?: number) => Stats.winsorizedMean(p1, p2),

    /**
     * Trimmed count statistic. Counts number of data points within specified percentiles.
     *
     * @example
     * ```typescript
     * StatFactory.Extended.tc(90);     // "tc90"
     * StatFactory.Extended.tc(10, 90); // "TC(10%:90%)"
     * ```
     */
    tc: (p1: number, p2?: number) => Stats.tc(p1, p2),

    /**
     * Alias for `tc`.
     */
    trimmedCount: (p1: number, p2?: number) => Stats.trimmedCount(p1, p2),

    /**
     * Trimmed sum statistic. Sum of data points within given percentile bounds.
     *
     * @example
     * ```typescript
     * StatFactory.Extended.ts(95);     // "ts95"
     * StatFactory.Extended.ts(25, 75); // "TS(25%:75%)"
     * ```
     */
    ts: (p1: number, p2?: number) => Stats.ts(p1, p2),

    /**
     * Alias for `ts`.
     */
    trimmedSum: (p1: number, p2?: number) => Stats.trimmedSum(p1, p2),

    /**
     * Percentile rank statistic. Reports percentage of data points falling within absolute-value bounds.
     *
     * Accepts either one or two numeric parameters representing the absolute-value range:
     * - Single parameter: upper bound, assumes lower bound is 0.
     * - Two parameters: explicitly defines lower and upper absolute-value bounds.
     *
     * @example
     * ```typescript
     * StatFactory.Extended.pr(300);       // "PR(0:300)", percentage below or equal to 300
     * StatFactory.Extended.pr(100,2000);  // "PR(100:2000)", percentage between 100 and 2000
     * ```
     */
    pr: (v1: number, v2?: number) => Stats.pr(v1, v2),

    /**
     * Alias for `pr`.
     */
    percentileRank: (v1: number, v2?: number) => Stats.percentileRank(v1, v2),
  },
} as const;

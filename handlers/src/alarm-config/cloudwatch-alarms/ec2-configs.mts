// THIS FILE WAS AUTOGENERATED VIA ./_template-configs.mts
// See file for instructions on how to generate new alarm config files.
/**
 * @fileoverview EC2 alarm configuration definitions.
 *
 * This file contains the default configurations for all supported EC2 CloudWatch alarms managed by AutoAlarm.
 *
 * ---
 *
 * @usage
 * The MetricAlarm interface {@link MetricAlarmConfig} contained in this list are strongly typed, specifically in the defaults object for
 *  * statistic
 *  * comparisonOperator
 *  * missingDataTreatment
 *
 *  It is strongly encouraged to use the following utilities/enums to populate values for the following fields which
 *  provide thorough TSDOC and autocomplete. However, you may also use string literals:
 *   * `comparisonOperator` - Use the AWS SDK enums for comparison operators {@link ComparisonOperator}
 *   * `missingDataTreatment` - Use the AWS SDK enums for missing data treatment {@link TreatMissingData}
 *
 * These are demonstrated in the examples below.
 *
 * ---
 *
 * @instructions
 * ### Adding to a current alarm configuration in this file
 * 1. Create a new alarm config file if it does not exists by running in the project root the following:
      `pnpm create-cw-configs [serviceName] [Team name that owns the Alarms]`
 * 2. Add the new configuration to the EC2 array
 * 3. Ensure the `tagKey` follows the tag key naming conventions in the README. Does not include 'autoalarm' (e.g. 5xx-count-anomaly)
 * 4. Set appropriate default values for all required fields
 * 5. Use the AWS SDK enums for comparison operators {@link ComparisonOperator} and missing data treatment {@link TreatMissingData}
 *
 * ---
 *
 * @requires
 * - Approval from Owners Team lead and consultation before adding new alarms
 * - Anomaly Alarms can only use the following comparison operators: GreaterThanUpperThreshold, LessThanLowerOrGreaterThanUpperThreshold, LessThanLowerThreshold
 *
 * ---
 *
 * @example
 * ```typescript
 * // Adding a new EC2 alarm configuration to configs file
 * export const _EC2Configs: MetricAlarmConfig[] = [ // only create the configs array if it does not exist
 *                                                             // Otherwise add to the existing array following the
 *                                                             // pattern below
 * {
 *   tagKey: 'new-metric-alarm',                          // Unique identifier
 *   metricName: 'MetricName',                            // CloudWatch metric name
 *   metricNamespace: 'AWS/EC2',
 *   defaultCreate: false,                                // Whether to create by default
 *   anomaly: false,                                      // Whether this is anomaly detection
 *   defaults: {
 *     warningThreshold: 100,                             // Warning threshold (null if not used)
 *     criticalThreshold: 200,                            // Critical threshold (null if not used)
 *     period: 60,                                        // Period in seconds
 *     evaluationPeriods: 2,                              // Evaluation periods
 *     statistic: 'Average',                                  // Statistic to use
 *     dataPointsToAlarm: 2,                              // Data points required to alarm
 *     comparisonOperator: ComparisonOperator.GREATER_THAN_THRESHOLD, // Comparison operator
 *     missingDataTreatment: TreatMissingData.IGNORE,                    // How to treat missing data
 *   },
 * },
 * ---
 *
 * @Owners HARMONY-DEVOPS
 */

import {MetricAlarmConfig} from '#types/alarm-config-types.mjs';
import {ComparisonOperator} from '@aws-sdk/client-cloudwatch';
import {TreatMissingData} from 'aws-cdk-lib/aws-cloudwatch';


/**
 * _EC2 alarm configuration definitions.
 * Implements the {@link MetricAlarmConfig} interface.
 * Used to map a tag key to a CloudWatch metric name and namespace to default alarm configurations {@link MetricAlarmOptions}.
 */
export const _EC2: MetricAlarmConfig[] = [
  {
    tagKey: 'cpu',
    metricName: 'CPUUtilization',
    metricNamespace: 'AWS/EC2',
    defaultCreate: true,
    anomaly: false,
    defaults: {
      warningThreshold: 95,
      criticalThreshold: 98,
      period: 60,
      evaluationPeriods: 5,
      statistic: 'Maximum',
      dataPointsToAlarm: 5,
      comparisonOperator: ComparisonOperator.GreaterThanThreshold,
      missingDataTreatment: TreatMissingData.IGNORE,
    },
  },
  {
    tagKey: 'cpu-anomaly',
    metricName: 'CPUUtilization',
    metricNamespace: 'AWS/EC2',
    defaultCreate: false,
    anomaly: true,
    defaults: {
      warningThreshold: 2,
      criticalThreshold: 5,
      period: 60,
      evaluationPeriods: 5,
      statistic: 'Average',
      dataPointsToAlarm: 5,
      comparisonOperator: 'GreaterThanUpperThreshold',
      missingDataTreatment: 'ignore',
    },
  },
  {
    tagKey: 'memory',
    metricName: '', // Empty string to account for divergent metric names between windows and linux instances for EC2 storage and memory configs. Assigned programmatically in ec2-modules.
    metricNamespace: 'CWAgent',
    defaultCreate: true,
    anomaly: false,
    defaults: {
      warningThreshold: 95,
      criticalThreshold: 98,
      period: 60,
      evaluationPeriods: 10,
      statistic: 'Maximum',
      dataPointsToAlarm: 10,
      comparisonOperator: 'GreaterThanThreshold',
      missingDataTreatment: 'ignore',
    },
  },
  {
    tagKey: 'memory-anomaly',
    metricName: '', // Empty string to account for divergent metric names between windows and linux instances for EC2 storage and memory configs. Assigned programmatically in ec2-modules.
    metricNamespace: 'CWAgent',
    defaultCreate: false,
    anomaly: true,
    defaults: {
      warningThreshold: 2,
      criticalThreshold: 5,
      period: 300,
      evaluationPeriods: 2,
      statistic: 'Average',
      dataPointsToAlarm: 2,
      comparisonOperator: 'GreaterThanUpperThreshold',
      missingDataTreatment: 'ignore',
    },
  },
  {
    tagKey: 'storage',
    metricName: '', // Empty string to account for divergent metric names between windows and linux instances for EC2 storage and memory configs. Assigned programmatically in ec2-modules.
    metricNamespace: 'CWAgent',
    defaultCreate: true,
    anomaly: false,
    defaults: {
      warningThreshold: 90,
      criticalThreshold: 95,
      period: 60,
      evaluationPeriods: 2,
      statistic: 'Maximum',
      dataPointsToAlarm: 1,
      comparisonOperator: 'GreaterThanThreshold',
      missingDataTreatment: 'ignore',
    },
  },
  {
    tagKey: 'storage-anomaly',
    metricName: '', // Empty string to account for divergent metric names between windows and linux instances for EC2 storage and memory configs. Assigned programmatically in ec2-modules.
    metricNamespace: 'CWAgent',
    defaultCreate: false,
    anomaly: true,
    defaults: {
      warningThreshold: 2,
      criticalThreshold: 3,
      period: 60,
      evaluationPeriods: 2,
      statistic: 'Average',
      dataPointsToAlarm: 1,
      comparisonOperator: 'GreaterThanUpperThreshold',
      missingDataTreatment: 'ignore',
    },
  },
  // TODO: network in and out still need to be passed off by devops
  //  and are disabled by default and not referenced in README.
  //  construct does not currently listen for tags on these.
  {
    tagKey: 'network-in',
    metricName: 'NetworkIn',
    metricNamespace: 'AWS/EC2',
    defaultCreate: false,
    anomaly: false,
    defaults: {
      warningThreshold: null,
      criticalThreshold: null,
      period: 60,
      evaluationPeriods: 5,
      statistic: 'Sum',
      dataPointsToAlarm: 5,
      comparisonOperator: 'LessThanThreshold',
      missingDataTreatment: 'ignore',
    },
  },
  {
    tagKey: 'network-in-anomaly',
    metricName: 'NetworkIn',
    metricNamespace: 'AWS/EC2',
    defaultCreate: false,
    anomaly: true,
    defaults: {
      warningThreshold: 2,
      criticalThreshold: 5,
      period: 60,
      evaluationPeriods: 5,
      statistic: 'Average',
      dataPointsToAlarm: 5,
      comparisonOperator: 'LessThanLowerThreshold',
      missingDataTreatment: 'ignore',
    },
  },
  {
    tagKey: 'network-out',
    metricName: 'NetworkOut',
    metricNamespace: 'AWS/EC2',
    defaultCreate: false,
    anomaly: false,
    defaults: {
      warningThreshold: null,
      criticalThreshold: null,
      period: 60,
      evaluationPeriods: 5,
      statistic: 'Sum',
      dataPointsToAlarm: 5,
      comparisonOperator: 'LessThanThreshold',
      missingDataTreatment: 'ignore',
    },
  },
  {
    tagKey: 'network-out-anomaly',
    metricName: 'NetworkOut',
    metricNamespace: 'AWS/EC2',
    defaultCreate: false,
    anomaly: true,
    defaults: {
      warningThreshold: 2,
      criticalThreshold: 5,
      period: 60,
      evaluationPeriods: 5,
      statistic: 'Average',
      dataPointsToAlarm: 5,
      comparisonOperator: 'LessThanLowerThreshold',
      missingDataTreatment: 'ignore',
    },
  },
  // add more as needed
];
